function Invoke-PortScan {
    param (
        [string]$targetInput,
        [string]$portsInput
    )

    # Funzione per espandere un intervallo di porte
    function Expand-Ports {
        param ($portsInput)
        $ports = @()
        
        foreach ($item in $portsInput -split ",") {
            if ($item -match "(\d+)-(\d+)") {
                $ports += ($matches[1]..$matches[2])
            } else {
                $ports += [int]$item
            }
        }
        
        return $ports | Sort-Object -Unique
    }

    # Funzione per espandere una subnet
    function Expand-Subnet {
        param ($subnet)

        $ipList = @()
        
        # Verifica se Ã¨ stata fornita una subnet in notazione CIDR
        if ($subnet -match "^(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/(\d{1,2})$") {
            $baseIp = [System.Net.IPAddress]::Parse($matches[1])
            $cidr = [int]$matches[2]

            # Calcola il numero totale di IP nella subnet
            $hostBits = 32 - $cidr
            $numAddresses = [math]::Pow(2, $hostBits) - 2  # Escludi l'IP di rete e di broadcast

            # Converte l'indirizzo base in formato numerico
            $baseIpInt = [BitConverter]::ToUInt32($baseIp.GetAddressBytes().Reverse(), 0)

            # Crea la lista di IP
            for ($i = 1; $i -le $numAddresses; $i++) {
                $currentIpInt = $baseIpInt + $i
                $currentIpBytes = [BitConverter]::GetBytes([uint32]$currentIpInt)
                $ipList += [System.Net.IPAddress]::Parse(($currentIpBytes[3..0] -join '.'))
            }
        } else {
            # Singolo IP, nessuna subnet da espandere
            $ipList += $subnet
        }

        return $ipList
    }

    # Espandi gli intervalli di porte e subnet
    $ports = Expand-Ports $portsInput
    $ips = Expand-Subnet $targetInput
    $results = @()

    foreach ($ip in $ips) {
        foreach ($port in $ports) {
            $client = New-Object System.Net.Sockets.TcpClient
            try {
                $client.Connect($ip.ToString(), $port)
                $results += [pscustomobject]@{
                    "Indirizzo IP" = $ip
                    "Porta"        = $port
                    "Stato"        = "Aperta"
                }
            } catch {
                $results += [pscustomobject]@{
                    "Indirizzo IP" = $ip
                    "Porta"        = $port
                    "Stato"        = "Bloccata"
                }
            } finally {
                $client.Close()
            }
        }
    }

    # Mostra i risultati
    $results | Format-Table -AutoSize
}

# Esecuzione automatica per testare
Invoke-PortScan -targetInput "192.168.2.0/24" -portsInput "445"
